version: 2.1

orbs: 
  slack: circleci/slack@4.10.1


defaults: &defaults ## using an anchor at the beginning of .circleci/config.yml to set these lines as our default for jobs:
  docker:
    - image: circleci/node:13.8.0

commands:
  roll-back-to-blue-deployment:
    description: Destroy back-end and front-end cloudformation stacks givenn a workflow ID and roll back to previous version
    parameters:
      workflow_id:
        type: string

    steps:
      - run: 
          name: deleted stack when jobs fails
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >>"
              aws cloudformation delete-stack \
              --stack-name udapeople-backend-<<parameters.workflow_id>>
                aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
              aws cloudformation delete-stack \
              --stack-name udapeople-frontend-<<parameters.workflow_id>> 

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/MuX1TZL2mZ5it49bKNGjiL/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if (($SUCCESS == 1))
            then
              cd ~/project/backend
              npm install > /dev/null
              npm run migrations:revert
            fi          

  

jobs:
  build-frontend:
    <<: *defaults  ## Then we use an alias with each job to write less lines. Here’s an example using the  job from earlier:
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-cache]
      - run:
          name: install and run fontend  build
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-cache

  build-backend:
    <<: *defaults   ## Then we use an alias with each job to write less lines. Here’s an example using the  job from earlier:
    steps:
      - checkout
      - restore_cache:
          keys: [backend-cache]
      - run:
          name:
          command: |
            cd backend
            npm install
            npm run build

      - save_cache:
          paths: [backend/node_modules]
          key: backend-cache

  test-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-cache]

      - run:
          name: test front-end code for errors/bugs
          command: |
            cd frontend
            npm install
            npm run test


  test-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-cache]

      - run: 
          name: test back-end code for errors/bugs
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-cache]

      - run:
          name: scan frontend code for vulnerability and fix
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force            
            npm audit --audit-level=critical


  scan-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-cache]

      - run: 
          name: scan backend code for vulnerabilty and             
          command: |
            cd backend
            npm install
            npm update mkdirp --depth 6
            npm install --save-dev webpack@5.73.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical             
           

      - slack/notify:
          event: fail
          template: basic_fail_1 

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure backend infrastructure exit / create an instance for the backend
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \

      - run:
          name: Ensure frontend infrastructure exist / deploy the green S3 bucket
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \

      - run:
          name: Add backend ip to inventory.txt file
          command: |
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text) >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt          

      - persist_to_workspace:
          root: ~/
          paths: 
            - project/.circleci/ansible/inventory.txt 

      - roll-back-to-blue-deployment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16         
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "15:80:c2:21:d0:9b:be:52:ea:d9:d1:81:15:2f:a4:94"

      - run:
          name: install dependencies
          command: |
            apk add --update --no-cache tar gzip ansible aws-cli      

      - attach_workspace:
          at: ~/

      - restore_cache:
          keys: [backend-cache]
          
      - run: 
          name: configure backend infrastructure using ansible playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml \
            --key-file ~/.ssh/id_rsa_1580c221d09bbe52ead9d181152fa494

      - persist_to_workspace:
          root: ~/
          paths: 
            - project/backend

      - roll-back-to-blue-deployment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migration:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: ~/.circleci/ansible/inventory.txt
      - run:
          name: Install AWS CLI dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install      

      - run:
          name: run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migration_dump.txt


      - run:
          name: send migrations to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl curl --insecure https://kvdb.io/MuX1TZL2mZ5it49bKNGjiL/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi             

      - roll-back-to-blue-deployment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: 
          name: install necessary dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm ansible curl aws-cli

      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env             
  
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - roll-back-to-blue-deployment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "15:80:c2:21:d0:9b:be:52:ea:d9:d1:81:15:2f:a4:94"

      - attach_workspace:
          at: ~/

      - run: 
          name: install dependencies
          command: apk add --update --no-cache tar gzip nodejs npm tree aws-cli ansible

      - run:
          name: deploy backend
          command: |
            cd backend
            npm install 
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            tree -afC /root/project/.circleci -I *node_modules*
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is ------$(tail -1 inventory.txt)"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml \
            --key-file ~/.ssh/id_rsa_1580c221d09bbe52ead9d181152fa494            
      
      - roll-back-to-blue-deployment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - run: 
          name: install dependencies
          command: |
            apk add --update --no-cache curl aws-cli tar gzip nodejs npm

      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl -s http://google.com
            then
                return 0
            else 
                return 1
            fi

      - run:
          name: Frontend smoke testt.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees" 
            echo $URL
            if curl ${URL} | grep "welcome"
            then
              return 0
            else 
              return 1
            fi
      - roll-back-to-blue-deployment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            yum install tar gzip npm nodejs -y

      - run:
          name: changing the router from the blue deployment to the green deployment by updating cloufront 
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople
            echo OldWorkflowID=${OldWorkflowID}
            echo Current Workflow ID: ${CIRCLE_WORKFLOW_ID:0:7}

      - roll-back-to-blue-deployment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


workflows:
  default-workflows:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend: 
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migration:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migration]
      - deploy-backend:
          requires: [deploy-frontend]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]

# version: 2.1

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             exit 1

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
# jobs:
#   build-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-build]
#       - run:
#           name: Build front-end
#           command: |
#             # Your code here
#             exit 1
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-build

#   build-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - run:
#           name: Back-end build
#           command: |
#              # Your code here
#              exit 1
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-build

#   test-frontend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here
                
#   test-backend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here
            
#   scan-frontend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here

#   scan-backend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here

#   deploy-infrastructure:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/backend.yml \
#               #--tags project=your-tag \
#               # --stack-name "your back-end stack name with workflow id" \
#               # --parameter-overrides ID="your workflow id"  
#               exit 1
#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               #--tags project=your-tag \
#               # --stack-name "your front-end stack name with workflow id" \
#               # --parameter-overrides ID="your workflow id"  
#               exit 1
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             # Your code here
#             exit 1
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt
#       # Here's where you will add some code to rollback on failure      

#   configure-infrastructure:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Configure server
#           command: |
#             # Your code here
#             exit 1
#       # Here's where you will add some code to rollback on failure      

#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#     steps:
#       # Checkout code from git
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             exit 1
#      # Here's where you will add some code to rollback on failure      

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

# workflows:
#   default:
#     jobs:
#       - build-frontend
#       - build-backend
#       - test-frontend:
#           requires: [build-frontend]
#       - test-backend:
#           requires: [build-backend]
#       - scan-backend:
#           requires: [build-backend]
#       - scan-frontend:
#           requires: [build-frontend]
#       - deploy-infrastructure:
#           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           filters:
#             branches:
#               only: [test-feature-branch]
#       - configure-infrastructure:
#           requires: [deploy-infrastructure]
#       - run-migrations:
#           requires: [configure-infrastructure]
#       - deploy-frontend:
#           requires: [run-migrations]
#       - deploy-backend:
#           requires: [run-migrations]
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
#           requires: [smoke-test]
#       - cleanup:
          # requires: [cloudfront-update]